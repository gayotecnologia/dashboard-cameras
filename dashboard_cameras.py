import streamlit as st
import pandas as pd
from PIL import Image
from datetime import datetime, timedelta
from login import check_login
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from reportlab.lib import colors
import base64
import pytz
import matplotlib.pyplot as plt
import re

# Checa login antes de qualquer coisa
check_login()

# Configura a p치gina para ser responsiva
st.set_page_config(layout="wide")

# Aplica fonte customizada via CSS
st.markdown("""
    <style>
    html, body, [class*="css"]  {
        font-family: 'Segoe UI', sans-serif;
    }
    </style>
""", unsafe_allow_html=True)

# Carrega imagens das logos (e redimensiona para tamanho adequado no PDF)
logo_esquerda = Image.open("logo.jpeg")
logo_direita = Image.open("atem.png")

# Converter imagens para base64
def pil_image_to_base64(img):
    buffer = BytesIO()
    img.save(buffer, format="PNG")
    return base64.b64encode(buffer.getvalue()).decode()

logo_esquerda_base64 = pil_image_to_base64(logo_esquerda)
logo_direita_base64 = pil_image_to_base64(logo_direita)

# Exibe as logos de forma responsiva
st.markdown(f"""
    <div style='display: flex; justify-content: space-between; align-items: center; width: 100%; padding: 10px 0;'>
        <img src='data:image/png;base64,{logo_esquerda_base64}' style='height: 40px;'>
        <img src='data:image/png;base64,{logo_direita_base64}' style='height: 40px;'>
    </div>
""", unsafe_allow_html=True)

# T칤tulo
st.markdown("<h3 style='text-align: center;'>Disponibilidade de c칙meras - Atem Bel칠m</h3>", unsafe_allow_html=True)

# Leitura do CSV
try:
    df = pd.read_csv("status_cameras.csv", sep="\t", encoding="utf-8")
    colunas_esperadas = [
        "Nome", "Em Funcionamento", "Endere칞o", "Descri칞칚o",
        "Ativado", "Modelo", "Dias de grava칞칚o", "Gravando em Disco", "FPS", "Disco Utilizado", "Tempo Inativo"
    ]
    for col in colunas_esperadas:
        if col not in df.columns:
            df[col] = ""
except Exception as e:
    st.error(f"Erro ao carregar o CSV: {e}")
    st.stop()

# Normalizar campos
df["Em Funcionamento"] = df["Em Funcionamento"].str.lower().fillna("").str.strip()
df["Gravando em Disco"] = df["Gravando em Disco"].str.lower().fillna("").str.strip()
df["Modelo"] = df["Modelo"].astype(str).str.slice(0, 15)  # Abreviar para 15 caracteres

# Converter Tempo Inativo para dias decimais
def tempo_para_dias(valor):
    try:
        match = re.search(r"(\d+)\s*Hora\(s\),\s*(\d+)\s*Minuto\(s\)\s*e\s*(\d+)\s*Segundo\(s\)", valor)
        if match:
            horas = int(match.group(1))
            minutos = int(match.group(2))
            segundos = int(match.group(3))
            total_segundos = horas * 3600 + minutos * 60 + segundos
            return round(total_segundos / 86400, 2)
        else:
            return 0.0
    except:
        return 0.0

df["Tempo Inativo"] = df["Tempo Inativo"].astype(str).apply(tempo_para_dias)

# C치lculos
total_cameras = len(df)
on_cameras = df["Em Funcionamento"].eq("sim").sum()
off_cameras = df["Em Funcionamento"].eq("n칚o").sum()
gravando = df["Gravando em Disco"].eq("sim").sum()
percent_on = round((on_cameras / total_cameras) * 100, 2)

# Fun칞칚o para criar cart칫es com cor
def card(title, value, color):
    st.markdown(
        f"""
        <div style="background-color: {color}; padding: 10px; border-radius: 10px; text-align: center;
                    color: white; font-weight: bold; font-size: 18px; font-family: 'Segoe UI', sans-serif;">
            <div style='font-size: 14px'>{title}</div>
            <div style='font-size: 22px'>{value}</div>
        </div>
        """,
        unsafe_allow_html=True
    )

# Cart칫es com layout responsivo
st.markdown("## 游늵 Vis칚o Geral")
col1, col2, col3, col4, col5 = st.columns([1, 1, 1, 1, 1])
with col1:
    card("Total C칙meras", total_cameras, "#343a40")
with col2:
    card("C칙meras ON", on_cameras, "#198754")
with col3:
    card("C칙meras OFF", off_cameras, "#dc3545")
with col4:
    card("Gravando", gravando, "#0d6efd")
with col5:
    cor_percent = "#198754" if percent_on >= 95 else "#dc3545"
    card("Online (%)", f"{percent_on}%", cor_percent)

# Filtro avan칞ado
st.markdown("---")
st.subheader("游늶 Tabela de C칙meras")
st.markdown("Use os filtros abaixo para refinar os resultados.")

col_f1, col_f2 = st.columns(2)
with col_f1:
    opcao_filtro = st.selectbox("Filtrar por funcionamento:", ["Todos", "Somente ON", "Somente OFF"])
with col_f2:
    modelo_filtro = st.selectbox("Filtrar por modelo:", ["Todos"] + sorted(df["Modelo"].dropna().unique().tolist()))

# Aplicar filtros
df_filtrado = df.copy()
if opcao_filtro == "Somente ON":
    df_filtrado = df_filtrado[df_filtrado["Em Funcionamento"] == "sim"]
elif opcao_filtro == "Somente OFF":
    df_filtrado = df_filtrado[df_filtrado["Em Funcionamento"] == "n칚o"]

if modelo_filtro != "Todos":
    df_filtrado = df_filtrado[df_filtrado["Modelo"] == modelo_filtro]

st.dataframe(df_filtrado.style.set_properties(**{
    "text-align": "center"
}).format({"Dias de grava칞칚o": "{:>}", "Tempo Inativo": "{:>}"}), use_container_width=True)

# Bot칚o de exporta칞칚o
st.markdown("\n### 游늯 Exportar Relat칩rio para PDF")

if st.button("Exportar Relat칩rio"):
    from export_pdf import exportar_relatorio_pdf
    pdf_data = exportar_relatorio_pdf(df_filtrado)
    st.download_button(
        label="游늯 Baixar Relat칩rio PDF",
        data=pdf_data,
        file_name=f"relatorio_cameras_{datetime.now().strftime('%Y-%m-%d')}.pdf",
        mime="application/pdf"
    )

# Gr치ficos
st.markdown("---")
st.subheader("游늳 Gr치ficos")

# Gr치fico 1: Dias de grava칞칚o por c칙mera
fig1, ax1 = plt.subplots(figsize=(12, 4))
df_dias = df_filtrado.copy()
df_dias["Dias de grava칞칚o"] = pd.to_numeric(df_dias["Dias de grava칞칚o"], errors="coerce")
df_dias = df_dias.dropna(subset=["Dias de grava칞칚o"])
if not df_dias.empty:
    df_dias.plot(x="Nome", y="Dias de grava칞칚o", kind="bar", ax=ax1, legend=False, color="#0d6efd")
    plt.xticks(rotation=90)
    plt.title("Dias de Grava칞칚o por C칙mera")
    st.pyplot(fig1)

# Gr치fico 2: C칙meras ON vs OFF
fig2, ax2 = plt.subplots()
df_estado = pd.Series({"ON": on_cameras, "OFF": off_cameras})
df_estado.plot(kind="bar", color=["#198754", "#dc3545"], ax=ax2)
plt.title("C칙meras ON x OFF")
st.pyplot(fig2)

# Gr치fico 3: Gravando vs N칚o gravando
fig3, ax3 = plt.subplots()
df_gravando = pd.Series({"Gravando": gravando, "N칚o Gravando": total_cameras - gravando})
df_gravando.plot(kind="bar", color=["#0d6efd", "#6c757d"], ax=ax3)
plt.title("Gravando em Disco")
st.pyplot(fig3)

# Gr치fico 4: Tempo Inativo em dias por c칙mera
fig4, ax4 = plt.subplots(figsize=(12, 4))
df_tempo = df_filtrado.dropna(subset=["Tempo Inativo"])
df_tempo = df_tempo[df_tempo["Tempo Inativo"] > 0]
if not df_tempo.empty:
    df_tempo_sorted = df_tempo.sort_values("Tempo Inativo", ascending=False).head(20)
    df_tempo_sorted.plot(x="Nome", y="Tempo Inativo", kind="bar", ax=ax4, legend=False, color="#dc3545")
    plt.xticks(rotation=90)
    plt.title("Top 20 C칙meras com Maior Tempo Inativo (em dias)")
    st.pyplot(fig4)
