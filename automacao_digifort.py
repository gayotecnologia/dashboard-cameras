import pyautogui
import time
import schedule
import subprocess
from datetime import datetime

# Desativa o fail-safe do PyAutoGUI (cuidado: sem ESC de emerg√™ncia)
pyautogui.FAILSAFE = False

def exportar_csv():
    try:
        print("‚ñ∂Ô∏è Iniciando automa√ß√£o no Digifort...")

        # Clicar em "Exportar relat√≥rio"
        pyautogui.click(1502, 977)
        time.sleep(2)

        # Selecionar o arquivo CSV j√° existente
        pyautogui.click(334, 26089)
        time.sleep(1)

        # Clicar em "Salvar"
        pyautogui.click(748, 588)
        time.sleep(2)

        # Popup: substituir arquivo
        pyautogui.click(1019, 524)
        time.sleep(1)

        # Popup: incluir cabe√ßalho
        pyautogui.click(1019, 617)
        time.sleep(2)

        print("‚úÖ Arquivo CSV exportado com sucesso!")

        # Enviar para o GitHub
        atualizar_github()

    except Exception as e:
        print(f"‚ö†Ô∏è Erro durante automa√ß√£o: {e}")

def atualizar_github():
    try:
        # Adiciona todas as mudan√ßas
        subprocess.run(["git", "add", "."], check=True)

        # Faz commit apenas se houver mudan√ßas
        subprocess.run(
            ["git", "commit", "-am", f"Atualiza√ß√£o autom√°tica - {datetime.now()}"],
            check=False
        )

        # Faz o push
        subprocess.run(["git", "push", "origin", "main"], check=True)

        print("‚úÖ Arquivo enviado para o GitHub com sucesso!")

    except subprocess.CalledProcessError as e:
        print(f"‚ö†Ô∏è Erro ao atualizar o GitHub: {e}")

# Agendar a automa√ß√£o a cada 10 minutos
schedule.every(2).minutes.do(exportar_csv)

print("===============================================")
print("üöÄ Iniciando Automa√ß√£o Digifort + GitHub")
print("===============================================")
print("‚è≥ Automa√ß√£o iniciada. Executando a cada 10 minutos...")

# Loop infinito da automa√ß√£o
while True:
    schedule.run_pending()
    time.sleep(1)
